{"version":3,"sources":["AddCategory.js","GifGridItem.js","helpers/getGifs.js","hooks/useFetchGifs.js","GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","fetch","resp","json","data","gifs","map","gif","id","images","downsized_medium","useFetchGifs","loading","state","setState","useEffect","then","GifGrid","console","log","img","index","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"2MAoCeA,EAjCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEDC,mBAAS,IAFR,mBAE9BC,EAF8B,KAElBC,EAFkB,KAiBrC,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAmBO,OAC3CN,EAAc,MAKlB,SACI,uBACAO,KAAK,OACLC,MAAOT,EACPU,SAlBY,SAACP,GACjBF,EAAcE,EAAEQ,OAAOF,a,QCGhBG,EATK,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAC1B,OACK,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCHJK,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbN,EAFa,0FAE4EK,EAF5E,sBAGAE,MAAMP,GAHN,cAGbQ,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAGDC,EAAOD,EAAKE,KAAI,SAACC,GAAO,IAAD,EACzB,MAAQ,CACJC,GAAID,EAAIC,GACRf,MAAOc,EAAId,MACXC,IAAG,UAAGa,EAAIE,cAAP,aAAG,EAAYC,iBAAiBhB,QAXxB,kBAeZW,GAfY,4CAAH,sDCkBLM,EAlBM,SAACZ,GAAc,IAAD,EAELpB,mBAAS,CAC/ByB,KAAM,GACNQ,SAAS,IAJkB,mBAExBC,EAFwB,KAEjBC,EAFiB,KAe/B,OARAC,qBAAU,WACNjB,EAAQC,GAAUiB,MAAK,SAAAX,GAASS,EAAS,CACrCV,KAAMC,EACNO,SAAS,SAGf,CAACb,IAEIc,GCWII,EAxBC,SAAC,GAAgB,IAAflB,EAAc,EAAdA,SAClBmB,QAAQC,IAAI,oBADoB,MAEMR,EAAaZ,GAAjCU,EAFc,EAEpBL,KAAcQ,EAFM,EAENA,QAGtB,OACI,qCACA,oBAAIjB,UAAU,oCAAd,SAAmDI,IAClDa,GAAW,4CACZ,qBAAKjB,UAAU,YAAf,SAEIc,EAAOH,KAAI,SAACc,EAAKC,GACb,OAAO,cAAC,EAAD,eAA6BD,GAAXC,YCO1BC,EAnBM,WAAO,IAAD,EACa3C,mBAAS,IADtB,mBAChBQ,EADgB,KACJT,EADI,KAGvB,OACI,qCACI,sCACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,8BAEQS,EAAWmB,KAAI,SAACP,EAASsB,GACrB,OAAO,cAAC,EAAD,CAAqBtB,SAAUA,GAAjBsB,Y,MCV7CE,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.9849fa99.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInput = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length > 1){\r\n            setCategories(categories => [inputValue,...categories]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n            type=\"text\"\r\n            value={inputValue}\r\n            onChange={handleInput}\r\n            ></input>\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;","\r\n\r\nconst GifGridItem = ({ title, url}) => {\r\n    return (\r\n         <div className=\"card animate__animated animate__bounce\">\r\n             <img src={url} alt={title}></img>\r\n             <p>{title}</p>\r\n         </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem;","\r\n\r\n\r\nexport const getGifs = async(category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=oRcwNVL2I4lVwfq4L61hEquMzxYXmnxS&q=${category}&limit=10`\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n\r\n    const gifs = data.map((gif)=>{\r\n        return  {\r\n            id: gif.id,\r\n            title: gif.title,\r\n            url:  gif.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n}","import { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nconst useFetchGifs = (category) => {\r\n    \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category).then(gifs => {setState({\r\n            data: gifs,\r\n            loading: false\r\n        })}\r\n        );\r\n    },[category])\r\n\r\n    return state;\r\n}\r\n\r\nexport default useFetchGifs;","import PropTypes from 'prop-types';\r\nimport GifGridItem from './GifGridItem';\r\nimport useFetchGifs from './hooks/useFetchGifs';\r\n\r\n\r\nconst GifGrid = ({category}) => {\r\nconsole.log(\"estoy en gigGrid\");\r\n    const { data: images, loading } = useFetchGifs(category);\r\n\r\n\r\n    return (\r\n        <>\r\n        <h1 className=\"animate__animated animate__fadeIn\">{category}</h1>\r\n        {loading && <p>Cargando...</p>}\r\n        <div className=\"grid-card\">\r\n        {\r\n            images.map((img, index) => {\r\n                return <GifGridItem key={index} {...img} />\r\n            })\r\n        }\r\n    </div>\r\n        </>\r\n    )\r\n}\r\n\r\nGifGrid.propTypes = {\r\n    category: PropTypes.string.isRequired\r\n}\r\n\r\nexport default GifGrid;","import { useState } from \"react\";\r\nimport AddCategory from \"./AddCategory\";\r\nimport GifGrid from \"./GifGrid\";\r\n\r\n\r\nconst GifExpertApp = () => {\r\n    const [categories, setCategories] = useState([]);\r\n\r\n    return (\r\n        <>\r\n            <h1>Gifs</h1>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr></hr>\r\n            <div>\r\n                {\r\n                    categories.map((category,index) => {\r\n                        return <GifGrid key={index} category={category}/>\r\n                    })\r\n                }\r\n            </div>     \r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}